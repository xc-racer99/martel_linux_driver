#!/usr/bin/perl
use strict;
use warnings;

use File::Temp qw(tempfile);

# Setup cups filter variables
my ($jobid, $user, $jobtitle, $copies, $options, $file) = @ARGV;

# Define mapping between PS codes and actual characters
my %hashmap = (
    one => 1,
    two => 2,
    three => 3,
    four => 4,
    five => 5,
    six => 6,
    seven => 7,
    eight => 8,
    nine => 9,
    zero => 0,
    space => " ",
    hyphen => "-",
    comma => ",",
    colon => ":",
    parenleft => "(",
    parenright => ")",
    slash => "/",
    plus => "+",
    period => "."
);

# Temp output file
my $out = new File::Temp( UNLINK => 1 );

# Set the width of the horizontal tabs
print $out "<ESC>D<2>";

# Check if we have a file or are reading from STDIN
my $fh;

if (defined $file) {
    open($fh, '<', $file) or die "Could not open file '$file' $!";
} else {
    open($fh, '<-') or die "Could not open STDIN $!";
}

# Go through each line and export it as needed
while (my $row = <$fh>) {
    chomp $row;
    my @tokens = split / /, $row;

    if ($tokens[-1] eq "glyphshow") {
        if (length $tokens[0] > 2) {
            # Use our mapping table to export the right symbol
            my $code = substr $tokens[0], 1;
            print $out $hashmap{$code};
        } else {
            # Single character, output it
            print $out substr $tokens[0], 1, 1;
        }
    } elsif ($tokens[-1] eq "moveto") {
        # This is a newline or a tab character
#        if ($tokens[0] < 100) {
        if ($tokens[0] == 0) {
            # Newline
            print $out "\n";
        } else {
            # Tab
            print $out "\t";
#            print $out "  ";
        }
    }
}

# Put out some white space
print $out "\f\f\n";

# Forward on to the texttomartel driver
my $cmd = "\$(dirname $0)/texttomartel '$jobid' '$user' '$jobtitle' '$copies' '$options' '$out'";
system($cmd);

# Close our file handles
close $out;
close $fh;
